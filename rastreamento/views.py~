from django.shortcuts import render_to_response
from itrack.system.models import System,Settings
from itrack.equipments.models import CustomField,Equipment,Tracking,TrackingData,EquipmentType
from django.contrib.auth.decorators import login_required, user_passes_test

def render_system_html2(childs,father="",rendered_list=""):
  if childs == []: 
    return ""
  
  if father != "":
    childof = " class='child-of-node-"+str(father)+"' "
  else:
    childof = ""
  
  for x in childs:
      if  type(x).__name__ == "list":
      #if its a list, execute recursively inside it
          parentIndex = childs.index(x) - 1
          father = System.objects.get(pk=childs[parentIndex]).id
          rendered_list+= render_system_html2(x,father)
      else:
      #if its a number, mount the url for the system
          # rendered_list+=System.objects.get(pk=x).name
          rendered_list+="<tr style='width:5%;' id=\"node-"+str(x)+"\" "+ childof +"><td style='width:50%;'>"+System.objects.get(pk=x).name+" </td><td style='text-align:center;'><a class='table-button' href=\"/system/edit/"+str(x)+"/\">Editar</a>  <a class='table-button' href=\"/system/delete/"+str(x)+"/\">Apagar</a></td></tr>"

  return rendered_list    


@login_required
def index(request):
  settings = Settings.objects.get(system=request.session["system"])
  if settings.map_google:
    map_google = 1
  if settings.map_maplink:
    map_maplink = 1
  if settings.map_multspectral:
    map_multispectral = 1
    
  system = request.session["system"]
  equips = Equipment.objects.filter(system=system)

  for item in equips:
    equiptype = EquipmentType.objects.filter(name=item.type)
    print equiptype
    
  return render_to_response("rastreamento/templates/rastreamento.html",locals())
  
# geofence test
def geofence(request):
  return render_to_response("templates/geofence.html",locals())
  
def systems(request,offset):

